/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.agm.view;
import com.agm.model.paintingInfo;
import com.amg.util.validationUtil;
import java.awt.Color;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @Prasamsha Singh 
 *  
 */
public class AGM extends javax.swing.JFrame {
    private List<paintingInfo> artItemList;
    private java.awt.CardLayout cardLayout;
    private final validationUtil validationUtil;
    private final Color redColor = new Color(255, 51, 0);
    private final Color greenColour = new Color(35, 101, 51);

    /**
     * Creates new form AGM
     */
    public AGM() {
        initComponents();
        validationUtil = new validationUtil();
        initializeLayout(); // Set up CardLayout and add screens
        initializeData(); // Initialize student data and table
        startProgress(); 
        // Set up CardLayout and add screens
       // initializeData(); // Initialize student data and table
        //startProgress();
    }
    
    //Already existing values in the tables
     private void initializeData() {
        artItemList = new LinkedList<>();

        // Registering sample students
        registerArtwork(new paintingInfo(11, "Prakriti Mali", "23/03/2024", "Watercolor", "9841489349", 53000, "Narnia Studio","Paper", "100 X 100"));
        registerArtwork(new paintingInfo(12, "Prasamsha Singh", "27/01/2024", "Acrylic", "9860997123", 100004, "Chitra Studio","Cloth", "1000 X 600"));
    }
    private void registerArtwork(paintingInfo items) {
        artItemList.add(items);
        DefaultTableModel model = (DefaultTableModel) mntable.getModel();
        model.addRow(new Object[]{
            items.getArtId(), items.getName(), items.getAddress(), items.getContact(), items.getDate(), items.getFormatt()
                ,items.getPrice(), items.getMedium(),items.getSize()
        });
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loginPanel = new javax.swing.JPanel();
        lgusernametxt = new javax.swing.JTextField();
        lgUsername = new javax.swing.JLabel();
        lgPassword = new javax.swing.JLabel();
        lgUsernamError = new javax.swing.JLabel();
        lgPasswordError = new javax.swing.JLabel();
        lgpasswordtxt = new javax.swing.JPasswordField();
        lgbutton = new javax.swing.JButton();
        lgImg = new javax.swing.JLabel();
        mnPanel = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        mnHome = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        mnLogoutButton = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        mnFeatured = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        mnAboutus = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        mnGallery = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mntable = new javax.swing.JTable();
        mnFormattxt = new javax.swing.JComboBox<>();
        mnDatetxt = new javax.swing.JTextField();
        mnNametxt = new javax.swing.JTextField();
        mnStudioAddresstxt = new javax.swing.JTextField();
        mnPricetxt = new javax.swing.JTextField();
        mnSizetxt = new javax.swing.JTextField();
        mnMeduimtxt = new javax.swing.JComboBox<>();
        clear = new javax.swing.JButton();
        mnAddButton = new javax.swing.JButton();
        mnIDtxt = new javax.swing.JTextField();
        mnDeleteButton = new javax.swing.JButton();
        mnUpdateButton = new javax.swing.JButton();
        contactError = new javax.swing.JLabel();
        dateError = new javax.swing.JLabel();
        nameError = new javax.swing.JLabel();
        mnContacttxt = new javax.swing.JTextField();
        idError = new javax.swing.JLabel();
        addressError = new javax.swing.JLabel();
        priceError = new javax.swing.JLabel();
        sizeError = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        pnLoaddingscreen = new javax.swing.JPanel();
        scLoaddingscreen = new javax.swing.JProgressBar();
        imgLS = new javax.swing.JLabel();

        loginPanel.setMaximumSize(new java.awt.Dimension(1000, 600));
        loginPanel.setMinimumSize(new java.awt.Dimension(1000, 600));
        loginPanel.setPreferredSize(new java.awt.Dimension(1000, 600));
        loginPanel.setLayout(null);

        lgusernametxt.setBackground(java.awt.SystemColor.controlHighlight);
        lgusernametxt.setText("p");
        lgusernametxt.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        lgusernametxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lgusernametxtActionPerformed(evt);
            }
        });
        loginPanel.add(lgusernametxt);
        lgusernametxt.setBounds(690, 310, 240, 30);

        lgUsername.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        lgUsername.setText("username");
        loginPanel.add(lgUsername);
        lgUsername.setBounds(570, 320, 80, 19);

        lgPassword.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        lgPassword.setText("password");
        loginPanel.add(lgPassword);
        lgPassword.setBounds(570, 390, 90, 19);
        loginPanel.add(lgUsernamError);
        lgUsernamError.setBounds(690, 350, 240, 20);
        loginPanel.add(lgPasswordError);
        lgPasswordError.setBounds(690, 420, 220, 20);

        lgpasswordtxt.setBackground(java.awt.SystemColor.controlHighlight);
        lgpasswordtxt.setText("z");
        lgpasswordtxt.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        lgpasswordtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lgpasswordtxtActionPerformed(evt);
            }
        });
        loginPanel.add(lgpasswordtxt);
        lgpasswordtxt.setBounds(690, 380, 240, 30);

        lgbutton.setText("login");
        lgbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lgbuttonActionPerformed(evt);
            }
        });
        loginPanel.add(lgbutton);
        lgbutton.setBounds(720, 450, 150, 50);

        lgImg.setBackground(new java.awt.Color(255, 255, 255));
        lgImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/Frame 1 (3).png"))); // NOI18N
        lgImg.setText("jLabel1");
        lgImg.setMaximumSize(new java.awt.Dimension(1000, 600));
        lgImg.setMinimumSize(new java.awt.Dimension(1000, 600));
        lgImg.setPreferredSize(new java.awt.Dimension(1000, 600));
        loginPanel.add(lgImg);
        lgImg.setBounds(0, 0, 1000, 600);

        mnPanel.setBackground(new java.awt.Color(255, 255, 255));
        mnPanel.setMaximumSize(new java.awt.Dimension(1000, 600));
        mnPanel.setMinimumSize(new java.awt.Dimension(1000, 600));
        mnPanel.setPreferredSize(new java.awt.Dimension(1000, 600));
        mnPanel.setLayout(null);

        jTabbedPane2.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane2.setDoubleBuffered(true);
        jTabbedPane2.setMaximumSize(new java.awt.Dimension(1000, 600));
        jTabbedPane2.setMinimumSize(new java.awt.Dimension(1000, 600));
        jTabbedPane2.setPreferredSize(new java.awt.Dimension(1000, 600));

        mnHome.setBackground(new java.awt.Color(255, 255, 255));
        mnHome.setMaximumSize(new java.awt.Dimension(1000, 500));
        mnHome.setMinimumSize(new java.awt.Dimension(1000, 500));
        mnHome.setPreferredSize(new java.awt.Dimension(1000, 500));
        mnHome.setLayout(null);
        mnHome.add(jScrollPane4);
        jScrollPane4.setBounds(980, 0, 20, 340);

        mnLogoutButton.setBackground(new java.awt.Color(102, 102, 102));
        mnLogoutButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        mnLogoutButton.setForeground(new java.awt.Color(255, 255, 255));
        mnLogoutButton.setText("back to login");
        mnLogoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnLogoutButtonActionPerformed(evt);
            }
        });
        mnHome.add(mnLogoutButton);
        mnLogoutButton.setBounds(800, 460, 160, 40);

        jLabel15.setBackground(new java.awt.Color(255, 246, 246));
        jLabel15.setFont(new java.awt.Font("SansSerif", 1, 64)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 246, 246));
        jLabel15.setText("Welcome");
        mnHome.add(jLabel15);
        jLabel15.setBounds(20, 190, 380, 70);

        jLabel16.setBackground(new java.awt.Color(255, 246, 246));
        jLabel16.setFont(new java.awt.Font("SansSerif", 1, 48)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 246, 246));
        jLabel16.setText("Maldala Art Point Admin Panel");
        mnHome.add(jLabel16);
        jLabel16.setBounds(20, 250, 870, 80);

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/Dürer - Bach Dolder 1.png"))); // NOI18N
        jLabel13.setText("jLabel13");
        mnHome.add(jLabel13);
        jLabel13.setBounds(0, 0, 990, 340);

        jLabel22.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        jLabel22.setText("<html><p>This admin Panel is designed to help or manage the art </p><p>works effectively and efficiently.  With functions like add </p><p>update and delete, you can easily manage the paintings </p><p>with ease.<p></html>");
        mnHome.add(jLabel22);
        jLabel22.setBounds(20, 330, 620, 210);

        jTabbedPane2.addTab("home", mnHome);

        mnFeatured.setBackground(new java.awt.Color(255, 255, 255));
        mnFeatured.setMaximumSize(new java.awt.Dimension(1000, 600));
        mnFeatured.setMinimumSize(new java.awt.Dimension(1000, 600));
        mnFeatured.setPreferredSize(new java.awt.Dimension(1000, 600));
        mnFeatured.setLayout(null);

        jLabel2.setBackground(new java.awt.Color(15, 255, 255));
        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 48)); // NOI18N
        jLabel2.setText("<html><p>Featured </p><p>Artworks</p> <html>");
        mnFeatured.add(jLabel2);
        jLabel2.setBounds(50, 30, 260, 140);

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/img 5.jpg"))); // NOI18N
        jLabel17.setText("jLabel17");
        mnFeatured.add(jLabel17);
        jLabel17.setBounds(50, 170, 450, 300);

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/img 1.jpg"))); // NOI18N
        jLabel11.setText("jLabel11");
        mnFeatured.add(jLabel11);
        jLabel11.setBounds(350, 320, 670, 270);

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/img 2.jpg"))); // NOI18N
        jLabel14.setText("jLabel14");
        mnFeatured.add(jLabel14);
        jLabel14.setBounds(350, 0, 680, 250);

        jLabel18.setText("jLabel18");
        mnFeatured.add(jLabel18);
        jLabel18.setBounds(190, 300, 43, 16);

        jLabel19.setText("jLabel19");
        mnFeatured.add(jLabel19);
        jLabel19.setBounds(380, 300, 43, 16);

        jLabel20.setText("jLabel20");
        mnFeatured.add(jLabel20);
        jLabel20.setBounds(110, 330, 43, 16);

        jLabel21.setText("jLabel21");
        mnFeatured.add(jLabel21);
        jLabel21.setBounds(330, 410, 43, 16);

        jTabbedPane2.addTab("featured", mnFeatured);

        mnAboutus.setBackground(new java.awt.Color(255, 255, 255));
        mnAboutus.setFocusTraversalPolicyProvider(true);
        mnAboutus.setLayout(null);

        jLabel23.setBackground(new java.awt.Color(0, 0, 0));
        jLabel23.setFont(new java.awt.Font("SansSerif", 1, 48)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setText("About US");
        mnAboutus.add(jLabel23);
        jLabel23.setBounds(490, 210, 300, 70);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        jLabel24.setBackground(new java.awt.Color(0, 0, 0));
        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setText("<html><p>Established in the 1950s, Mandala Art Gallery is one of the </p><p>oldest and most renowned art galleries in Nepal. Located in </p><p>the heart of Kathmandu, the gallery has been a hub for art </p><p>enthusiasts, offering a unique blend of traditional and </p><p>contemporary artworks. With a special focus on the intricate </p><p>and mesmerizing Mandala art, the gallery has become a </p><p>symbol of Nepal's rich artistic heritage. Through the years, </p><p>Mandala Art Gallery has continued to showcase exceptional </p><p>works that celebrate the cultural and spiritual essence of </p><p>Nepal, making it a must-visit destination for art lovers from </p><p>around the world.</p><html>");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(61, Short.MAX_VALUE)
                .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );

        mnAboutus.add(jPanel1);
        jPanel1.setBounds(440, 210, 410, 310);

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/Resurrecting an Ancient Fabric More Precious Than Silk That Hasn't Been Spun for Centuries 1.png"))); // NOI18N
        mnAboutus.add(jLabel12);
        jLabel12.setBounds(64, 76, 443, 303);

        jTabbedPane2.addTab("about us", mnAboutus);

        mnGallery.setBackground(new java.awt.Color(45, 45, 45));
        mnGallery.setForeground(new java.awt.Color(255, 255, 255));
        mnGallery.setEnabled(false);
        mnGallery.setMaximumSize(new java.awt.Dimension(1000, 700));
        mnGallery.setMinimumSize(new java.awt.Dimension(1000, 700));
        mnGallery.setPreferredSize(new java.awt.Dimension(1000, 700));
        mnGallery.setLayout(null);

        mntable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ArtID", "Artist Name", "Date", "Meduim", "Contact", "Price", "Studio Address", "Format ", "Size"
            }
        ));
        jScrollPane1.setViewportView(mntable);

        mnGallery.add(jScrollPane1);
        jScrollPane1.setBounds(41, 12, 891, 187);

        mnFormattxt.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Paper", "Cloth", "Glass" }));
        mnFormattxt.setBorder(null);
        mnFormattxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnFormattxtActionPerformed(evt);
            }
        });
        mnGallery.add(mnFormattxt);
        mnFormattxt.setBounds(31, 449, 190, 46);

        mnDatetxt.setText("dd/mm/yyyy");
        mnDatetxt.setBorder(null);
        mnDatetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnDatetxtActionPerformed(evt);
            }
        });
        mnGallery.add(mnDatetxt);
        mnDatetxt.setBounds(731, 353, 210, 50);

        mnNametxt.setBorder(null);
        mnNametxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnNametxtActionPerformed(evt);
            }
        });
        mnGallery.add(mnNametxt);
        mnNametxt.setBounds(233, 227, 190, 50);

        mnStudioAddresstxt.setBorder(null);
        mnStudioAddresstxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnStudioAddresstxtActionPerformed(evt);
            }
        });
        mnGallery.add(mnStudioAddresstxt);
        mnStudioAddresstxt.setBounds(491, 353, 190, 50);

        mnPricetxt.setBorder(null);
        mnPricetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnPricetxtActionPerformed(evt);
            }
        });
        mnGallery.add(mnPricetxt);
        mnPricetxt.setBounds(491, 227, 190, 50);

        mnSizetxt.setBorder(null);
        mnSizetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnSizetxtActionPerformed(evt);
            }
        });
        mnGallery.add(mnSizetxt);
        mnSizetxt.setBounds(238, 353, 190, 50);

        mnMeduimtxt.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Acrylic", "Watercolor", "Oil", "Charcoal" }));
        mnMeduimtxt.setToolTipText("");
        mnMeduimtxt.setBorder(null);
        mnMeduimtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnMeduimtxtActionPerformed(evt);
            }
        });
        mnGallery.add(mnMeduimtxt);
        mnMeduimtxt.setBounds(31, 353, 173, 60);

        clear.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        clear.setText("clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });
        mnGallery.add(clear);
        clear.setBounds(590, 450, 130, 46);

        mnAddButton.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        mnAddButton.setText("Add");
        mnAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnAddButtonActionPerformed(evt);
            }
        });
        mnGallery.add(mnAddButton);
        mnAddButton.setBounds(740, 450, 130, 44);

        mnIDtxt.setBorder(null);
        mnIDtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnIDtxtActionPerformed(evt);
            }
        });
        mnGallery.add(mnIDtxt);
        mnIDtxt.setBounds(31, 227, 168, 50);

        mnDeleteButton.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        mnDeleteButton.setText("delete");
        mnDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnDeleteButtonActionPerformed(evt);
            }
        });
        mnGallery.add(mnDeleteButton);
        mnDeleteButton.setBounds(430, 450, 140, 46);

        mnUpdateButton.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        mnUpdateButton.setText("Update");
        mnUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnUpdateButtonActionPerformed(evt);
            }
        });
        mnGallery.add(mnUpdateButton);
        mnUpdateButton.setBounds(275, 449, 140, 46);
        mnGallery.add(contactError);
        contactError.setBounds(731, 283, 210, 30);
        mnGallery.add(dateError);
        dateError.setBounds(731, 413, 210, 30);
        mnGallery.add(nameError);
        nameError.setBounds(238, 283, 179, 30);

        mnContacttxt.setText("98");
        mnContacttxt.setBorder(null);
        mnContacttxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnContacttxtActionPerformed(evt);
            }
        });
        mnGallery.add(mnContacttxt);
        mnContacttxt.setBounds(731, 227, 210, 50);
        mnGallery.add(idError);
        idError.setBounds(30, 280, 194, 30);
        mnGallery.add(addressError);
        addressError.setBounds(491, 407, 190, 30);
        mnGallery.add(priceError);
        priceError.setBounds(500, 280, 172, 34);
        mnGallery.add(sizeError);
        sizeError.setBounds(238, 413, 190, 30);

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ID");
        mnGallery.add(jLabel1);
        jLabel1.setBounds(31, 205, 100, 16);

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Price");
        mnGallery.add(jLabel3);
        jLabel3.setBounds(491, 205, 120, 16);

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Contact");
        mnGallery.add(jLabel4);
        jLabel4.setBounds(731, 205, 120, 16);

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("type");
        mnGallery.add(jLabel5);
        jLabel5.setBounds(42, 427, 90, 16);

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Date");
        mnGallery.add(jLabel6);
        jLabel6.setBounds(731, 331, 100, 16);

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Address");
        mnGallery.add(jLabel7);
        jLabel7.setBounds(491, 331, 130, 16);

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Size");
        mnGallery.add(jLabel8);
        jLabel8.setBounds(244, 331, 130, 16);

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Meduim");
        mnGallery.add(jLabel9);
        jLabel9.setBounds(38, 331, 100, 16);

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Name");
        mnGallery.add(jLabel10);
        jLabel10.setBounds(233, 205, 110, 16);

        jTabbedPane2.addTab("items list", mnGallery);

        mnPanel.add(jTabbedPane2);
        jTabbedPane2.setBounds(0, 0, 1000, 600);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1000, 600));
        setResizable(false);
        setSize(new java.awt.Dimension(1000, 600));
        getContentPane().setLayout(null);

        scLoaddingscreen.setBackground(new java.awt.Color(255, 204, 102));

        imgLS.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/agm/resources/Frame 1 (1).png"))); // NOI18N
        imgLS.setText("jLabel1");
        imgLS.setMaximumSize(new java.awt.Dimension(1000, 600));
        imgLS.setMinimumSize(new java.awt.Dimension(1000, 600));
        imgLS.setPreferredSize(new java.awt.Dimension(1000, 600));
        imgLS.setRequestFocusEnabled(false);

        javax.swing.GroupLayout pnLoaddingscreenLayout = new javax.swing.GroupLayout(pnLoaddingscreen);
        pnLoaddingscreen.setLayout(pnLoaddingscreenLayout);
        pnLoaddingscreenLayout.setHorizontalGroup(
            pnLoaddingscreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnLoaddingscreenLayout.createSequentialGroup()
                .addGap(370, 370, 370)
                .addComponent(scLoaddingscreen, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(imgLS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        pnLoaddingscreenLayout.setVerticalGroup(
            pnLoaddingscreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnLoaddingscreenLayout.createSequentialGroup()
                .addGap(470, 470, 470)
                .addComponent(scLoaddingscreen, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(imgLS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        getContentPane().add(pnLoaddingscreen);
        pnLoaddingscreen.setBounds(0, 0, 1000, 600);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //initialzing layout to ensure the loading screen apprears first
    private void initializeLayout() {
        cardLayout = new java.awt.CardLayout();
        getContentPane().setLayout(cardLayout);

        // Add panels with unique identifiers
        getContentPane().add(loginPanel, "LoginScreen");
        getContentPane().add(mnPanel, "MainScreen");
        getContentPane().add(pnLoaddingscreen, "LoadingScreen");

        // Start with the loading screen
        loadScreen("LoadingScreen");
    }
    
    //makes the scroll bar load
    private void startProgress() {
        javax.swing.SwingWorker<Void, Integer> worker = new javax.swing.SwingWorker<>() {
            @Override
            protected Void doInBackground() throws Exception {
                for (int i = 0; i <= 100; i++) {
                    Thread.sleep(30); // Simulated delay for progress bar
                    publish(i); // Publish progress
                }
                return null;
            }

            @Override
            protected void process(java.util.List<Integer> chunks) {
                int progress = chunks.get(chunks.size() - 1);
                scLoaddingscreen.setValue(progress);
            }

            @Override
            protected void done() {
                loadScreen("LoginScreen"); // Switch to login screen
            }
        };
        worker.execute(); // Start the worker thread
    }
    
    private void loadScreen(String screenName) {
        cardLayout.show(getContentPane(), screenName);
    }
    
    private void lgusernametxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lgusernametxtActionPerformed
        // TODO add your handling code here:
                // TODO add your handling code here:
        // Get the username and password input


    }//GEN-LAST:event_lgusernametxtActionPerformed
     
    private void lgpasswordtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lgpasswordtxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lgpasswordtxtActionPerformed

    private void lgbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lgbuttonActionPerformed
        // TODO add your handling code here:
        String username = lgusernametxt.getText();
        String password = new String(lgpasswordtxt.getPassword());

        // incase username is empty  
        if (username.isEmpty()) {
            lgUsernamError.setText("Please enter your username");
        }
        // incase password is empty
        else if(password.isEmpty()){
            lgPasswordError.setText("Please enter your password.");
        }
         
        //incase  username and password are incorrect
        else if (!username.equals("p")) {
            lgUsernamError.setText("Username incorrect");
        } 
        
        //check if password is incorrect
        else if (!password.equals("z")) {
            lgPasswordError.setText("password incorrect.");
        } 
           
        // proceeds to main screen if the criteria is met
        else {
            lgUsernamError.setText(""); // Clear any previous error messages
            lgPasswordError.setText(""); // Clear any previous error messages

            loadScreen("MainScreen"); // Load the main screen
        }
    }//GEN-LAST:event_lgbuttonActionPerformed

    private void mnSizetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnSizetxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnSizetxtActionPerformed

    private void mnFormattxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnFormattxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnFormattxtActionPerformed

    private void mnContacttxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnContacttxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnContacttxtActionPerformed

    private void mnDatetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnDatetxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnDatetxtActionPerformed

    private void mnIDtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnIDtxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnIDtxtActionPerformed
    private boolean validateArtwork(JTextField txtField, JLabel errorLbl, String errorMsg, Color redColor, Color successColor, boolean isValidFormat) {
    if (validationUtil.isNullOrEmpty(txtField.getText())) {
        txtField.setBorder(createBorder(redColor));  // Changed to use createBorder
        errorLbl.setText("Field cannot be empty!");
        errorLbl.setVisible(true);
        return false;
    } else if (!isValidFormat) {
        txtField.setBorder(createBorder(redColor));  // Changed to use createBorder
        errorLbl.setText(errorMsg);
        errorLbl.setVisible(true);
        return false;
    } else {
        txtField.setBorder(createBorder(successColor));  // Changed to use createBorder
        errorLbl.setVisible(false);
        return true;
    }
}

    
    private javax.swing.border.Border createBorder(Color color) {
    return javax.swing.BorderFactory.createLineBorder(color, 2);
    }

    private void showDialogBox(String message, String title, int messageType) {
        JOptionPane.showMessageDialog(this, message, title, messageType);
    }


    private void mnAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnAddButtonActionPerformed
    // TODO add your handling code here:
    boolean noError = true;

    // Validate Name
    noError &= validateArtwork(
            mnNametxt, nameError, "must be in alphabets.",
            redColor, greenColour, validationUtil.ValidName(mnNametxt.getText())
    );
    // Validate ID
    noError &= validateArtwork(
            mnIDtxt,  idError, "must be 4 digits.",
            redColor, greenColour, validationUtil.isValidId(mnIDtxt.getText())
    );
    // Validate Date
    noError &= validateArtwork(
            mnDatetxt,  dateError, "Enter the correct format.",
            redColor, greenColour, validationUtil.isValidDate(mnDatetxt.getText())
    );
    // Validate contact
    noError &= validateArtwork(
            mnContacttxt,  contactError, "Must start from 98 and be 10 digits.",
            redColor, greenColour, validationUtil.ValidContact(mnContacttxt.getText())
    );
    // Validate price
    noError &= validateArtwork(
            mnPricetxt,  priceError, "must be in digits.",
            redColor, greenColour, validationUtil.ValidPrice(mnPricetxt.getText())
    );
    // Validate address
    noError &= validateArtwork(
            mnStudioAddresstxt,  addressError, "must be in alphabets.",
            redColor, greenColour, validationUtil.ValidAddress(mnStudioAddresstxt.getText())
    );
    // Validate size
    noError &= validateArtwork(
            mnSizetxt,  sizeError, "must be in height X width form.",
            redColor, greenColour, validationUtil.ValidSize(mnSizetxt.getText())
    );

    // If no errors, collect data for adding to table
    if (noError) {
        // Prepare data for the table
        // Retrieve values from combo boxes
        // Use these values in your logic
        paintingInfo items = new paintingInfo(
            Integer.parseInt(mnIDtxt.getText().trim()),
            mnNametxt.getText().trim(),
            mnDatetxt.getText().trim(),
            mnMeduimtxt.getSelectedItem().toString().trim(),
            mnContacttxt.getText().trim(),
            Integer.parseInt(mnPricetxt.getText().trim()),
            mnStudioAddresstxt.getText().trim(),
            mnFormattxt.getSelectedItem().toString().trim(),
            mnSizetxt.getText().trim()
        );

        if (checkDuplicateID(items)) {
            // Add the student if no duplicate is found
            mnIDtxt.setBorder(createBorder(redColor));  // Changed to use createBorder
            idError.setText("Duplicate ID");
        } else {
            artItemList.add(items);
            addArtwork(artItemList);
            mnIDtxt.setBorder(createBorder(greenColour));  // Changed to use createBorder
            mnNametxt.setText("");
            mnIDtxt.setText("");
            mnDatetxt.setText("");
            mnContacttxt.setText("");
            mnPricetxt.setText("");
            mnStudioAddresstxt.setText("");
            mnSizetxt.setText("");
            mnMeduimtxt.setSelectedIndex(0);
            mnFormattxt.setSelectedIndex(0);
            showDialogBox("Art Item added.", "task successful", JOptionPane.INFORMATION_MESSAGE);
        }
    }    


    }//GEN-LAST:event_mnAddButtonActionPerformed
    
    //adds items to table
    private void addArtwork(List<paintingInfo> itemsList) {
        DefaultTableModel model = (DefaultTableModel) mntable.getModel();

        // Clear existing rows if needed
        model.setRowCount(0);

        // Populate the table with student data
        itemsList.forEach(item -> model.addRow(new Object[]{
              item.getArtId(), item.getName(), item.getDate(), item.getMedium(), item.getContact(), item.getPrice()
              , item.getSize(), item.getFormatt(), item.getAddress()
        }));
    }
    
    private boolean checkDuplicateID(paintingInfo item) {
        return artItemList.stream()
                .anyMatch(existingArtItem
                        -> existingArtItem.getArtId() == item.getArtId());
    }

    private void mnNametxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnNametxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnNametxtActionPerformed

    private boolean updateArtwork(paintingInfo updatedItem) {
    for (int i = 0; i < artItemList.size(); i++) {
        if (artItemList.get(i).getArtId() == updatedItem.getArtId()) {
            artItemList.set(i, updatedItem); // Update the existing item
            return true;
        }
    }
    return false; // No matching ID found
}

    private void mnUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnUpdateButtonActionPerformed
        
            // TODO add your handling code here:
        boolean noError = true;

        // Validate Name
        noError &= validateArtwork(
                mnNametxt, nameError, "must be in alphabets.",
                redColor, greenColour, validationUtil.ValidName(mnNametxt.getText())
        );
        // Validate ID
        noError &= validateArtwork(
                mnIDtxt,  idError, "must be 4 digits.",
                redColor, greenColour, validationUtil.isValidId(mnIDtxt.getText())
        );
        // Validate Date
        noError &= validateArtwork(
                mnDatetxt,  dateError, "Enter the correct format.",
                redColor, greenColour, validationUtil.isValidDate(mnDatetxt.getText())
        );
        // Validate contact
        noError &= validateArtwork(
                mnContacttxt,  contactError, "Must start from 98 and be 10 digits.",
                redColor, greenColour, validationUtil.ValidContact(mnContacttxt.getText())
        );
        // Validate price
        noError &= validateArtwork(
                mnPricetxt,  priceError, "must be in digits.",
                redColor, greenColour, validationUtil.ValidPrice(mnPricetxt.getText())
        );
        // Validate address
        noError &= validateArtwork(
                mnStudioAddresstxt,  addressError, "must be in alphabets.",
                redColor, greenColour, validationUtil.ValidAddress(mnStudioAddresstxt.getText())
        );
        // Validate size
        noError &= validateArtwork(
                mnSizetxt,  sizeError, "must be in height X width form.",
                redColor, greenColour, validationUtil.ValidSize(mnSizetxt.getText())
        );
        // add to table is no errors
        if(noError){
            paintingInfo updatedItem = new paintingInfo(
            Integer.parseInt(mnIDtxt.getText().trim()), // Updated ID
            mnNametxt.getText().trim(),                 // Updated Name
            mnDatetxt.getText().trim(),                 // Updated Date
            mnMeduimtxt.getSelectedItem().toString().trim(), // Updated Medium
            mnContacttxt.getText().trim(),              // Updated Contact
            Integer.parseInt(mnPricetxt.getText().trim()), // Updated Price
            mnStudioAddresstxt.getText().trim(),       // Updated Address
            mnFormattxt.getSelectedItem().toString().trim(), // Updated Format
            mnSizetxt.getText().trim()                 // Updated Size
        );


        // If the item was updated, show a success message
            if (updateArtwork(updatedItem)) {
            addArtwork(artItemList);  // Refresh the table
            showDialogBox("Art Item updated successfully.", "Task successful", JOptionPane.INFORMATION_MESSAGE);
            resetFormFields(); 
                }
            else {
            // If no item was updated (ID not found), show an error message
            showDialogBox("Art Item with this ID not found.", "Error", JOptionPane.ERROR_MESSAGE);
        }
     }

    }//GEN-LAST:event_mnUpdateButtonActionPerformed


    private void mnDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnDeleteButtonActionPerformed
        // TODO add your handling code here:
          // Get the value from the ID text field
    String idText = mnIDtxt.getText().trim();

    // Using the  existing method to check if id is empty
    if (validationUtil.isNullOrEmpty(idText)) {
        validateArtwork(
                mnIDtxt,idError, "enter ID.",
                redColor, greenColour, validationUtil.isValidId(idText)
        );
        return; 
    }

    try {
        // Parse the ID text to an integer
        int idToDelete = Integer.parseInt(idText);

        // Check if any item matches the ID and remove it
        boolean isDeleted = artItemList.removeIf(item -> item.getArtId() == idToDelete);

        if (isDeleted) {
            // Reload the table with updated data
            addArtwork(artItemList);
            JOptionPane.showMessageDialog(this, "Item deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "ID not found.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid ID. Please enter a valid number.", "Input Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_mnDeleteButtonActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        // TODO add your handling code here:
        resetFormFields();
    }//GEN-LAST:event_clearActionPerformed

    private void mnPricetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnPricetxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnPricetxtActionPerformed

    private void mnLogoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnLogoutButtonActionPerformed
        // TODO add your handling code here:
        lgusernametxt.setText("");
        lgpasswordtxt.setText("");
        loadScreen("LoginScreen"); // Load the main screen
    }//GEN-LAST:event_mnLogoutButtonActionPerformed

    private void mnStudioAddresstxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnStudioAddresstxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnStudioAddresstxtActionPerformed

    private void mnMeduimtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnMeduimtxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnMeduimtxtActionPerformed
    
    private void resetFormFields() {
    // Reset the form fields after successful update
    mnNametxt.setText("");
    mnIDtxt.setText("");
    mnDatetxt.setText("");
    mnContacttxt.setText("");
    mnPricetxt.setText("");
    mnStudioAddresstxt.setText("");
    mnSizetxt.setText("");
    mnMeduimtxt.setSelectedIndex(0);
    mnFormattxt.setSelectedIndex(0);
}





    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AGM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AGM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AGM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AGM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AGM().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addressError;
    private javax.swing.JButton clear;
    private javax.swing.JLabel contactError;
    private javax.swing.JLabel dateError;
    private javax.swing.JLabel idError;
    private javax.swing.JLabel imgLS;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JLabel lgImg;
    private javax.swing.JLabel lgPassword;
    private javax.swing.JLabel lgPasswordError;
    private javax.swing.JLabel lgUsernamError;
    private javax.swing.JLabel lgUsername;
    private javax.swing.JButton lgbutton;
    private javax.swing.JPasswordField lgpasswordtxt;
    private javax.swing.JTextField lgusernametxt;
    private javax.swing.JPanel loginPanel;
    private javax.swing.JPanel mnAboutus;
    private javax.swing.JButton mnAddButton;
    private javax.swing.JTextField mnContacttxt;
    private javax.swing.JTextField mnDatetxt;
    private javax.swing.JButton mnDeleteButton;
    private javax.swing.JPanel mnFeatured;
    private javax.swing.JComboBox<String> mnFormattxt;
    private javax.swing.JPanel mnGallery;
    private javax.swing.JPanel mnHome;
    private javax.swing.JTextField mnIDtxt;
    private javax.swing.JButton mnLogoutButton;
    private javax.swing.JComboBox<String> mnMeduimtxt;
    private javax.swing.JTextField mnNametxt;
    private javax.swing.JPanel mnPanel;
    private javax.swing.JTextField mnPricetxt;
    private javax.swing.JTextField mnSizetxt;
    private javax.swing.JTextField mnStudioAddresstxt;
    private javax.swing.JButton mnUpdateButton;
    private javax.swing.JTable mntable;
    private javax.swing.JLabel nameError;
    private javax.swing.JPanel pnLoaddingscreen;
    private javax.swing.JLabel priceError;
    private javax.swing.JProgressBar scLoaddingscreen;
    private javax.swing.JLabel sizeError;
    // End of variables declaration//GEN-END:variables
}
